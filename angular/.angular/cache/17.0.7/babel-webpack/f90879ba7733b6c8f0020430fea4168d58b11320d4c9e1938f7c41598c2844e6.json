{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nlet TokenService = class TokenService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.iss = {\n      login: \"http://35.214.132.93/api/login\",\n      register: \"http://35.214.132.93/api/register\",\n      fishes: \"http://35.214.132.93/api/account/fishes\",\n      fishesCreate: \"http://35.214.132.93/api/account/fishes/create\"\n    };\n  }\n  handle(token) {\n    this.set(token);\n  }\n  set(token) {\n    localStorage.setItem('token', token);\n  }\n  get() {\n    return localStorage.getItem('token');\n  }\n  remove() {\n    localStorage.removeItem('token');\n  }\n  isValid() {\n    const token = this.get();\n    if (token) {\n      const payload = this.payload(token);\n      if (payload) {\n        // if we have the iss from the ones we declared above, the payload is active\n        return Object.values(this.iss).indexOf(payload.iss) > -1 ? true : false;\n      }\n    }\n    return false;\n  }\n  payload(token) {\n    const payload = token.split('.')[1];\n    return this.decode(payload);\n  }\n  decode(payload) {\n    return JSON.parse(atob(payload));\n  }\n  loggedIn() {\n    // if everything is fine -> logged in.\n    return this.isValid();\n  }\n  // Example function to demonstrate HTTP request with token\n  getFishes() {\n    const url = this.iss.fishes;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.get()}`\n    });\n    return this.httpClient.get(url, {\n      headers\n    });\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: HttpClient\n  }];\n};\nTokenService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [HttpClient])], TokenService);\nexport { TokenService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}