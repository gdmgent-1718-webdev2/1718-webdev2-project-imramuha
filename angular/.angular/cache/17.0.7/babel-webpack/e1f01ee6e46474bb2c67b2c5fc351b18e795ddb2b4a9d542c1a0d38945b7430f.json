{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { TokenService } from './token.service';\nlet AuthStatusService = class AuthStatusService {\n  constructor(tokenService) {\n    this.tokenService = tokenService;\n    this.loggedIn = new BehaviorSubject(this.tokenService.loggedIn());\n    this.authStatus = this.loggedIn.asObservable();\n    // Check for token expiration or invalidity on initialization\n    this.checkTokenValidity();\n  }\n  changeAuthStatus(value) {\n    this.loggedIn.next(value);\n    // Check for token expiration or invalidity whenever auth status changes\n    this.checkTokenValidity();\n  }\n  checkTokenValidity() {\n    if (!this.tokenService.isValid()) {\n      // Token is either expired or invalid, delete it from local storage\n      this.tokenService.remove();\n      // Refresh the page\n      //window.location.reload();\n    }\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: TokenService\n  }];\n};\nAuthStatusService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [TokenService])], AuthStatusService);\nexport { AuthStatusService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}