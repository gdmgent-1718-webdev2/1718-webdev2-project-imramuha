{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nlet RequestOptionsService = class RequestOptionsService {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(request, next) {\n    console.log('Request intercepted:', request);\n    const token = localStorage.getItem('token');\n    if (token) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n      const newRequest = request.clone({\n        headers\n      });\n      return next.handle(newRequest).pipe(catchError(error => {\n        console.log('Interceptor Error:', error);\n        if (error.status === 401) {\n          console.log('Unauthorized response, logging out');\n          localStorage.removeItem('token');\n          this.router.navigateByUrl('/login');\n        }\n        return throwError(error);\n      }));\n    } else {\n      console.log('No token found, proceeding without Authorization header');\n      return next.handle(request);\n    }\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: Router\n  }];\n};\nRequestOptionsService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [Router])], RequestOptionsService);\nexport { RequestOptionsService };\nexport const requestOptionsProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: RequestOptionsService,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}