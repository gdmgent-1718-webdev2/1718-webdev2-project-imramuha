{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Pipe, EventEmitter, Output, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { Subject, from } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Toast style.\n */\nconst _c0 = a0 => ({\n  \"snotifyToast__buttons--bold\": a0\n});\nfunction ButtonsComponent_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function ButtonsComponent_button_1_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const button_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(button_r1.action ? button_r1.action(ctx_r2.toast) : ctx_r2.remove());\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const button_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, button_r1.bold));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", button_r1.text, \" \");\n  }\n}\nconst _c1 = a0 => ({\n  \"snotifyToast__input--filled\": a0\n});\nconst _c2 = a0 => ({\n  width: a0\n});\nfunction ToastComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelement(1, \"span\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(1, _c2, ctx_r0.state.progress * 100 + \"%\"));\n  }\n}\nfunction ToastComponent_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"truncate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"id\", \"snotify_\" + ctx_r5.toast.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 2, ctx_r5.toast.title, ctx_r5.toast.config.titleMaxLength), \" \");\n  }\n}\nfunction ToastComponent_div_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"truncate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(2, 1, ctx_r6.toast.body, ctx_r6.toast.config.bodyMaxLength));\n  }\n}\nfunction ToastComponent_div_2_ng_snotify_prompt_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ng-snotify-prompt\", 14);\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"toast\", ctx_r7.toast);\n  }\n}\nconst _c3 = a1 => [\"snotify-icon\", a1];\nfunction ToastComponent_div_2_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 15);\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(1, _c3, ctx_r8.toast.config.iconClass || \"snotify-icon--\" + ctx_r8.toast.config.type));\n  }\n}\nfunction ToastComponent_div_2_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 16);\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"src\", ctx_r9.toast.config.icon, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction ToastComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, ToastComponent_div_2_div_1_Template, 3, 5, \"div\", 8)(2, ToastComponent_div_2_div_2_Template, 3, 4, \"div\", 9)(3, ToastComponent_div_2_ng_snotify_prompt_3_Template, 1, 1, \"ng-snotify-prompt\", 4)(4, ToastComponent_div_2_div_4_Template, 1, 3, \"div\", 10)(5, ToastComponent_div_2_ng_template_5_Template, 1, 1, \"ng-template\", null, 11, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r10 = i0.ɵɵreference(6);\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.toast.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.toast.body);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.toast.config.type === ctx_r1.state.promptType);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.toast.config.icon)(\"ngIfElse\", _r10);\n  }\n}\nfunction ToastComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 17);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.toast.config.html, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction ToastComponent_ng_snotify_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ng-snotify-button\", 14);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"toast\", ctx_r4.toast);\n  }\n}\nconst _c4 = (a1, a2, a3) => [\"snotifyToast animated\", a1, a2, a3];\nconst _c5 = (a0, a1, a2, a3) => ({\n  \"-webkit-transition\": a0,\n  transition: a1,\n  \"-webkit-animation-duration\": a2,\n  \"animation-duration\": a3\n});\nfunction SnotifyComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 2);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", ctx_r0.backdrop);\n  }\n}\nfunction SnotifyComponent_div_1_ng_snotify_toast_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ng-snotify-toast\", 4);\n    i0.ɵɵlistener(\"stateChanged\", function SnotifyComponent_div_1_ng_snotify_toast_1_Template_ng_snotify_toast_stateChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.stateChanged($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const notification_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"toast\", notification_r4);\n  }\n}\nfunction SnotifyComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, SnotifyComponent_div_1_ng_snotify_toast_1_Template, 1, 1, \"ng-snotify-toast\", 3);\n    i0.ɵɵpipe(2, \"slice\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const position_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"snotify snotify-\", position_r2, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(2, 4, ctx_r1.notifications[position_r2], ctx_r1.blockSizeA, ctx_r1.blockSizeB));\n  }\n}\nvar SnotifyStyle;\n(function (SnotifyStyle) {\n  SnotifyStyle[\"simple\"] = \"simple\";\n  SnotifyStyle[\"success\"] = \"success\";\n  SnotifyStyle[\"error\"] = \"error\";\n  SnotifyStyle[\"warning\"] = \"warning\";\n  SnotifyStyle[\"info\"] = \"info\";\n  SnotifyStyle[\"async\"] = \"async\";\n  SnotifyStyle[\"confirm\"] = \"confirm\";\n  SnotifyStyle[\"prompt\"] = \"prompt\";\n})(SnotifyStyle || (SnotifyStyle = {}));\n\n/**\n * Transform arguments to Snotify object\n * @param target any\n * @param propertyKey SnotifyTypeType\n * @param descriptor PropertyDescriptor\n * @returns Snotify\n */\nfunction TransformArgument(target, propertyKey, descriptor) {\n  if (propertyKey === SnotifyStyle.async) {\n    return {\n      value(...args) {\n        let result;\n        if (args.length === 2) {\n          result = {\n            title: null,\n            body: args[0],\n            config: null,\n            action: args[1]\n          };\n        } else if (args.length === 3) {\n          if (typeof args[1] === 'string') {\n            result = {\n              title: args[1],\n              body: args[0],\n              config: null,\n              action: args[2]\n            };\n          } else {\n            result = {\n              title: null,\n              body: args[0],\n              config: args[2],\n              action: args[1]\n            };\n          }\n        } else {\n          result = {\n            title: args[1],\n            body: args[0],\n            config: args[3],\n            action: args[2]\n          };\n        }\n        return descriptor.value.apply(this, [result]);\n      }\n    };\n  } else {\n    return {\n      value(...args) {\n        let result;\n        if (args.length === 1) {\n          result = {\n            title: null,\n            body: args[0],\n            config: null\n          };\n        } else if (args.length === 3) {\n          result = {\n            title: args[1],\n            body: args[0],\n            config: args[2]\n          };\n        } else {\n          result = {\n            title: null,\n            config: null,\n            body: args[0],\n            [typeof args[1] === 'string' ? 'title' : 'config']: args[1]\n          };\n        }\n        return descriptor.value.apply(this, [result]);\n      }\n    };\n  }\n}\n\n/**\n * Generates random id\n * @return number\n */\nfunction uuid() {\n  return Math.floor(Math.random() * (Date.now() - 1)) + 1;\n}\n/**\n * Simple is object check.\n * @param item Object<any>\n * @returns boolean\n */\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\n * Deep merge objects.\n * @param sources Array<Object<any>>\n * @returns Object<any>\n */\nfunction mergeDeep(...sources) {\n  const target = {};\n  if (!sources.length) {\n    return target;\n  }\n  while (sources.length > 0) {\n    const source = sources.shift();\n    if (isObject(source)) {\n      for (const key in source) {\n        if (isObject(source[key])) {\n          target[key] = mergeDeep(target[key], source[key]);\n        } else {\n          Object.assign(target, {\n            [key]: source[key]\n          });\n        }\n      }\n    }\n  }\n  return target;\n}\nfunction animate(start, duration, callback) {\n  let endTime;\n  requestAnimationFrame(timestamp => endTime = timestamp + duration);\n  const calculate = () => {\n    requestAnimationFrame(timestamp => {\n      const runtime = timestamp - endTime;\n      const progress = Math.min(runtime / duration, 1) + start;\n      if (runtime < duration) {\n        if (callback(+(100 * progress).toFixed(2), progress)) {\n          calculate();\n        }\n      }\n    });\n  };\n}\n\n/**\n * Defines toast style depending on method name\n * @param target any\n * @param propertyKey SnotifyTypeType\n * @param descriptor PropertyDescriptor\n * @returns value: ((...args: any[]) => any)\n */\nfunction SetToastType(target, propertyKey, descriptor) {\n  return {\n    value(...args) {\n      args[0].config = {\n        ...args[0].config,\n        type: propertyKey\n      };\n      return descriptor.value.apply(this, args);\n    }\n  };\n}\n\n// @TODO remove method in observable way\n/**\n * Toast main model\n */\nclass SnotifyToast {\n  id;\n  title;\n  body;\n  config;\n  /**\n   * Emits SnotifyEventType\n   */\n  eventEmitter = new Subject();\n  /**\n   * Holds all subscribers because we need to unsubscribe from all before toast get destroyed\n   */\n  eventsHolder = [];\n  /**\n   * Toast prompt value\n   */\n  value;\n  /**\n   * Toast validator\n   */\n  valid;\n  constructor(id, title, body, config) {\n    this.id = id;\n    this.title = title;\n    this.body = body;\n    this.config = config;\n    if (this.config.type === SnotifyStyle.prompt) {\n      this.value = '';\n    }\n    this.on('hidden', () => {\n      this.eventsHolder.forEach(subscription => {\n        subscription.unsubscribe();\n      });\n    });\n  }\n  /**\n   * Subscribe to toast events\n   * @returns this\n   * @param event SnotifyEventType\n   * @param action (toast: this) => void\n   */\n  on(event, action) {\n    this.eventsHolder.push(this.eventEmitter.subscribe(e => {\n      if (e === event) {\n        action(this);\n      }\n    }));\n    return this;\n  }\n  /**\n   * Tests if a toast equals this toast.\n   * @returns boolean true then equals else false.\n   * @param toast SnotifyToast\n   */\n  equals(toast) {\n    return this.body === toast.body && this.title === toast.title && this.config.type === toast.config.type;\n  }\n}\n\n/**\n * SnotifyService - create, remove, config toasts\n */\n// tslint:disable:unified-signatures\nclass SnotifyService {\n  config;\n  emitter = new Subject();\n  toastChanged = new Subject();\n  toastDeleted = new Subject();\n  notifications = [];\n  constructor(config) {\n    this.config = config;\n  }\n  /**\n   * emit changes in notifications array\n   */\n  emit() {\n    this.emitter.next(this.notifications.slice());\n  }\n  /**\n   * returns SnotifyToast object\n   * @param id Number\n   * @return SnotifyToast|undefined\n   */\n  get(id) {\n    return this.notifications.find(toast => toast.id === id);\n  }\n  /**\n   * add SnotifyToast to notifications array\n   * @param toast SnotifyToast\n   */\n  add(toast) {\n    if (this.config.global.filterDuplicates && this.containsToast(toast)) {\n      return;\n    }\n    if (this.config.global.newOnTop) {\n      this.notifications.unshift(toast);\n    } else {\n      this.notifications.push(toast);\n    }\n    this.emit();\n  }\n  /**\n   * checks if the toast is in the collection.\n   * @param inToast SnotifyToast\n   * @returns boolean\n   */\n  containsToast(inToast) {\n    return this.notifications.some(toast => toast.equals(inToast));\n  }\n  /**\n   * If ID passed, emits toast animation remove, if ID & REMOVE passed, removes toast from notifications array\n   * @param id number\n   * @param remove boolean\n   */\n  remove(id, remove) {\n    if (!id) {\n      return this.clear();\n    } else if (remove) {\n      this.notifications = this.notifications.filter(toast => toast.id !== id);\n      return this.emit();\n    }\n    this.toastDeleted.next(id);\n  }\n  /**\n   * Clear notifications array\n   */\n  clear() {\n    this.notifications = [];\n    this.emit();\n  }\n  /**\n   * Creates toast and add it to array, returns toast id\n   * @param snotify Snotify\n   * @return number\n   */\n  create(snotify) {\n    const config = mergeDeep(this.config.toast, this.config.type[snotify.config.type], snotify.config);\n    const toast = new SnotifyToast(uuid(), snotify.title, snotify.body, config);\n    this.add(toast);\n    return toast;\n  }\n  setDefaults(defaults) {\n    return this.config = mergeDeep(this.config, defaults);\n  }\n  /**\n   * Transform toast arguments into Snotify object\n   */\n  simple(args) {\n    return this.create(args);\n  }\n  /**\n   * Transform toast arguments into Snotify object\n   */\n  success(args) {\n    return this.create(args);\n  }\n  /**\n   * Transform toast arguments into Snotify object\n   */\n  error(args) {\n    return this.create(args);\n  }\n  /**\n   * Transform toast arguments into Snotify object\n   */\n  info(args) {\n    return this.create(args);\n  }\n  /**\n   * Transform toast arguments into Snotify object\n   */\n  warning(args) {\n    return this.create(args);\n  }\n  /**\n   * Transform toast arguments into Snotify object\n   */\n  confirm(args) {\n    return this.create(args);\n  }\n  /**\n   * Transform toast arguments into Snotify object\n   */\n  prompt(args) {\n    return this.create(args);\n  }\n  /**\n   * Transform toast arguments into Snotify object\n   */\n  async(args) {\n    let async;\n    if (args.action instanceof Promise) {\n      async = from(args.action);\n    } else {\n      async = args.action;\n    }\n    const toast = this.create(args);\n    toast.on('mounted', () => {\n      const subscription = async.subscribe(next => {\n        this.mergeToast(toast, next);\n      }, error => {\n        this.mergeToast(toast, error, SnotifyStyle.error);\n        subscription.unsubscribe();\n      }, () => {\n        this.mergeToast(toast, {}, SnotifyStyle.success);\n        subscription.unsubscribe();\n      });\n    });\n    return toast;\n  }\n  mergeToast(toast, next, type) {\n    if (next.body) {\n      toast.body = next.body;\n    }\n    if (next.title) {\n      toast.title = next.title;\n    }\n    if (type) {\n      toast.config = mergeDeep(toast.config, this.config.global, this.config.toast[type], {\n        type\n      }, next.config);\n    } else {\n      toast.config = mergeDeep(toast.config, next.config);\n    }\n    if (next.html) {\n      toast.config.html = next.html;\n    }\n    this.emit();\n    this.toastChanged.next(toast);\n  }\n  /**\n   * Creates empty toast with html string inside\n   * @param html string | SafeHtml\n   * @param config SnotifyToastConfig\n   * @returns number\n   */\n  html(html, config) {\n    return this.create({\n      title: null,\n      body: null,\n      config: {\n        ...config,\n        ...{\n          html\n        }\n      }\n    });\n  }\n  static ɵfac = function SnotifyService_Factory(t) {\n    return new (t || SnotifyService)(i0.ɵɵinject('SnotifyToastConfig'));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SnotifyService,\n    factory: SnotifyService.ɵfac\n  });\n}\n__decorate([TransformArgument\n/**\n * Determines current toast type and collects default configuration\n */, SetToastType], SnotifyService.prototype, \"simple\", null);\n__decorate([TransformArgument\n/**\n * Determines current toast type and collects default configuration\n */, SetToastType], SnotifyService.prototype, \"success\", null);\n__decorate([TransformArgument\n/**\n * Determines current toast type and collects default configuration\n */, SetToastType], SnotifyService.prototype, \"error\", null);\n__decorate([TransformArgument\n/**\n * Determines current toast type and collects default configuration\n */, SetToastType], SnotifyService.prototype, \"info\", null);\n__decorate([TransformArgument\n/**\n * Determines current toast type and collects default configuration\n */, SetToastType], SnotifyService.prototype, \"warning\", null);\n__decorate([TransformArgument\n/**\n * Determines current toast type and collects default configuration\n */, SetToastType], SnotifyService.prototype, \"confirm\", null);\n__decorate([TransformArgument\n/**\n * Determines current toast type and collects default configuration\n */, SetToastType], SnotifyService.prototype, \"prompt\", null);\n__decorate([TransformArgument\n/**\n * Determines current toast type and collects default configuration\n */, SetToastType], SnotifyService.prototype, \"async\", null);\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SnotifyService, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: ['SnotifyToastConfig']\n    }]\n  }], {\n    simple: [],\n    success: [],\n    error: [],\n    info: [],\n    warning: [],\n    confirm: [],\n    prompt: [],\n    async: []\n  });\n})();\n\n/**\n * Buttons component\n */\nclass ButtonsComponent {\n  service;\n  /**\n   * Get buttons Array\n   */\n  toast;\n  constructor(service) {\n    this.service = service;\n  }\n  /**\n   * remove toast\n   */\n  remove() {\n    this.service.remove(this.toast.id);\n  }\n  static ɵfac = function ButtonsComponent_Factory(t) {\n    return new (t || ButtonsComponent)(i0.ɵɵdirectiveInject(SnotifyService));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ButtonsComponent,\n    selectors: [[\"ng-snotify-button\"]],\n    inputs: {\n      toast: \"toast\"\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[1, \"snotifyToast__buttons\"], [\"type\", \"button\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 3, \"ngClass\", \"click\"]],\n    template: function ButtonsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, ButtonsComponent_button_1_Template, 2, 4, \"button\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.toast.config.buttons);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgForOf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonsComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-snotify-button',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div class=\\\"snotifyToast__buttons\\\">\\n  <button\\n    type=\\\"button\\\"\\n    *ngFor=\\\"let button of toast.config.buttons\\\"\\n    [ngClass]=\\\"{ 'snotifyToast__buttons--bold': button.bold }\\\"\\n    (click)=\\\"button.action ? button.action(toast) : remove()\\\"\\n  >\\n    {{ button.text }}\\n  </button>\\n</div>\\n\"\n    }]\n  }], () => [{\n    type: SnotifyService\n  }], {\n    toast: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Truncate toast text pipe\n */\nclass TruncatePipe {\n  transform(value, ...args) {\n    let limit = 40;\n    let trail = '...';\n    if (args.length > 0) {\n      limit = args.length > 0 ? parseInt(args[0], 10) : limit;\n      trail = args.length > 1 ? args[1] : trail;\n    }\n    return value.length > limit ? value.substring(0, limit) + trail : value;\n  }\n  static ɵfac = function TruncatePipe_Factory(t) {\n    return new (t || TruncatePipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"truncate\",\n    type: TruncatePipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TruncatePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'truncate'\n    }]\n  }], null, null);\n})();\n\n/**\n * Prompt component. Part of PROMPT type\n */\nclass PromptComponent {\n  /**\n   * Get PROMPT placeholder\n   */\n  toast;\n  /**\n   * Is PROMPT focused\n   */\n  isPromptFocused = false;\n  handleInput($event) {\n    this.toast.value = $event.target.value;\n    this.toast.eventEmitter.next('input');\n  }\n  static ɵfac = function PromptComponent_Factory(t) {\n    return new (t || PromptComponent)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: PromptComponent,\n    selectors: [[\"ng-snotify-prompt\"]],\n    inputs: {\n      toast: \"toast\"\n    },\n    decls: 6,\n    vars: 8,\n    consts: [[1, \"snotifyToast__input\", 3, \"ngClass\"], [\"autofocus\", \"\", \"type\", \"text\", 1, \"snotifyToast__input__field\", 3, \"id\", \"input\", \"focus\", \"blur\"], [1, \"snotifyToast__input__label\", 3, \"for\"], [1, \"snotifyToast__input__labelContent\"]],\n    template: function PromptComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 0)(1, \"input\", 1);\n        i0.ɵɵlistener(\"input\", function PromptComponent_Template_input_input_1_listener($event) {\n          return ctx.handleInput($event);\n        })(\"focus\", function PromptComponent_Template_input_focus_1_listener() {\n          return ctx.isPromptFocused = true;\n        })(\"blur\", function PromptComponent_Template_input_blur_1_listener() {\n          return ctx.isPromptFocused = !!ctx.toast.value.length;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"label\", 2)(3, \"span\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵpipe(5, \"truncate\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c1, ctx.isPromptFocused));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"id\", ctx.toast.id);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", ctx.toast.id);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 4, ctx.toast.config.placeholder));\n      }\n    },\n    dependencies: [i2.NgClass, TruncatePipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PromptComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-snotify-prompt',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<span class=\\\"snotifyToast__input\\\" [ngClass]=\\\"{ 'snotifyToast__input--filled': isPromptFocused }\\\">\\n  <input\\n    (input)=\\\"handleInput($event)\\\"\\n    autofocus\\n    class=\\\"snotifyToast__input__field\\\"\\n    type=\\\"text\\\"\\n    [id]=\\\"toast.id\\\"\\n    (focus)=\\\"isPromptFocused = true\\\"\\n    (blur)=\\\"isPromptFocused = !!toast.value.length\\\"\\n  />\\n  <label class=\\\"snotifyToast__input__label\\\" [for]=\\\"toast.id\\\">\\n    <span class=\\\"snotifyToast__input__labelContent\\\">{{ toast.config.placeholder | truncate }}</span>\\n  </label>\\n</span>\\n\"\n    }]\n  }], null, {\n    toast: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Toast position\n */\nvar SnotifyPosition;\n(function (SnotifyPosition) {\n  SnotifyPosition[\"leftTop\"] = \"leftTop\";\n  SnotifyPosition[\"leftCenter\"] = \"leftCenter\";\n  SnotifyPosition[\"leftBottom\"] = \"leftBottom\";\n  SnotifyPosition[\"rightTop\"] = \"rightTop\";\n  SnotifyPosition[\"rightCenter\"] = \"rightCenter\";\n  SnotifyPosition[\"rightBottom\"] = \"rightBottom\";\n  SnotifyPosition[\"centerTop\"] = \"centerTop\";\n  SnotifyPosition[\"centerCenter\"] = \"centerCenter\";\n  SnotifyPosition[\"centerBottom\"] = \"centerBottom\";\n})(SnotifyPosition || (SnotifyPosition = {}));\nclass ToastComponent {\n  service;\n  /**\n   * Get toast from notifications array\n   */\n  toast;\n  stateChanged = new EventEmitter();\n  toastDeletedSubscription;\n  toastChangedSubscription;\n  /**\n   * requestAnimationFrame id\n   */\n  animationFrame;\n  /**\n   * Toast state\n   */\n  state = {\n    paused: false,\n    progress: 0,\n    animation: '',\n    isDestroying: false,\n    promptType: SnotifyStyle.prompt\n  };\n  constructor(service) {\n    this.service = service;\n  }\n  // Lifecycles\n  /**\n   * Init base options. Subscribe to toast changed, toast deleted\n   */\n  ngOnInit() {\n    this.toastChangedSubscription = this.service.toastChanged.subscribe(toast => {\n      if (this.toast.id === toast.id) {\n        this.initToast();\n      }\n    });\n    this.toastDeletedSubscription = this.service.toastDeleted.subscribe(id => {\n      if (this.toast.id === id) {\n        this.onRemove();\n      }\n    });\n    if (!this.toast.config.timeout) {\n      this.toast.config.showProgressBar = false;\n    }\n    this.toast.eventEmitter.next('mounted');\n    this.state.animation = 'snotifyToast--in';\n  }\n  ngAfterContentInit() {\n    setTimeout(() => {\n      this.stateChanged.emit('beforeShow');\n      this.toast.eventEmitter.next('beforeShow');\n      this.state.animation = this.toast.config.animation.enter;\n    }, this.service.config.toast.animation.time / 5); // time to show toast push animation (snotifyToast--in)\n  }\n  /**\n   * Unsubscribe subscriptions\n   */\n  ngOnDestroy() {\n    cancelAnimationFrame(this.animationFrame);\n    this.toast.eventEmitter.next('destroyed');\n    this.toastChangedSubscription.unsubscribe();\n    this.toastDeletedSubscription.unsubscribe();\n  }\n  /*\n  Event hooks\n   */\n  /**\n   * Trigger OnClick lifecycle\n   */\n  onClick() {\n    this.toast.eventEmitter.next('click');\n    if (this.toast.config.closeOnClick) {\n      this.service.remove(this.toast.id);\n    }\n  }\n  /**\n   * Trigger beforeDestroy lifecycle. Removes toast\n   */\n  onRemove() {\n    this.state.isDestroying = true;\n    this.toast.eventEmitter.next('beforeHide');\n    this.stateChanged.emit('beforeHide');\n    this.state.animation = this.toast.config.animation.exit;\n    setTimeout(() => {\n      this.stateChanged.emit('hidden');\n      this.state.animation = 'snotifyToast--out';\n      this.toast.eventEmitter.next('hidden');\n      setTimeout(() => this.service.remove(this.toast.id, true), this.toast.config.animation.time / 2);\n    }, this.toast.config.animation.time / 2);\n  }\n  /**\n   * Trigger onHoverEnter lifecycle\n   */\n  onMouseEnter() {\n    this.toast.eventEmitter.next('mouseenter');\n    if (this.toast.config.pauseOnHover) {\n      this.state.paused = true;\n    }\n  }\n  /**\n   * Trigger onHoverLeave lifecycle\n   */\n  onMouseLeave() {\n    if (this.toast.config.pauseOnHover && this.toast.config.timeout) {\n      this.state.paused = false;\n      this.startTimeout(this.toast.config.timeout * this.state.progress);\n    }\n    this.toast.eventEmitter.next('mouseleave');\n  }\n  /**\n   * Remove toast completely after animation\n   */\n  onExitTransitionEnd() {\n    if (this.state.isDestroying) {\n      return;\n    }\n    this.initToast();\n    this.toast.eventEmitter.next('shown');\n  }\n  /*\n   Common\n   */\n  /**\n   * Initialize base toast config\n   *\n   */\n  initToast() {\n    if (this.toast.config.timeout > 0) {\n      this.startTimeout(0);\n    }\n  }\n  /**\n   * Start progress bar\n   * @param startTime number\n   */\n  startTimeout(startTime = 0) {\n    const start = performance.now();\n    const calculate = () => {\n      this.animationFrame = requestAnimationFrame(timestamp => {\n        const runtime = timestamp + startTime - start;\n        const progress = Math.min(runtime / this.toast.config.timeout, 1);\n        if (this.state.paused) {\n          cancelAnimationFrame(this.animationFrame);\n        } else if (runtime < this.toast.config.timeout) {\n          this.state.progress = progress;\n          calculate();\n        } else {\n          this.state.progress = 1;\n          cancelAnimationFrame(this.animationFrame);\n          this.service.remove(this.toast.id);\n        }\n      });\n    };\n    calculate();\n  }\n  static ɵfac = function ToastComponent_Factory(t) {\n    return new (t || ToastComponent)(i0.ɵɵdirectiveInject(SnotifyService));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToastComponent,\n    selectors: [[\"ng-snotify-toast\"]],\n    inputs: {\n      toast: \"toast\"\n    },\n    outputs: {\n      stateChanged: \"stateChanged\"\n    },\n    decls: 6,\n    vars: 18,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"animationend\", \"click\", \"mouseenter\", \"mouseleave\"], [\"class\", \"snotifyToast__progressBar\", 4, \"ngIf\"], [\"class\", \"snotifyToast__inner\", 4, \"ngIf\", \"ngIfElse\"], [\"toastHTML\", \"\"], [3, \"toast\", 4, \"ngIf\"], [1, \"snotifyToast__progressBar\"], [1, \"snotifyToast__progressBar__percentage\", 3, \"ngStyle\"], [1, \"snotifyToast__inner\"], [\"class\", \"snotifyToast__title\", 4, \"ngIf\"], [\"class\", \"snotifyToast__body\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\", \"ngIfElse\"], [\"elseBlock\", \"\"], [1, \"snotifyToast__title\"], [1, \"snotifyToast__body\"], [3, \"toast\"], [3, \"ngClass\"], [1, \"snotify-icon\", 3, \"src\"], [1, \"snotifyToast__inner\", 3, \"innerHTML\"]],\n    template: function ToastComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"animationend\", function ToastComponent_Template_div_animationend_0_listener() {\n          return ctx.onExitTransitionEnd();\n        })(\"click\", function ToastComponent_Template_div_click_0_listener() {\n          return ctx.onClick();\n        })(\"mouseenter\", function ToastComponent_Template_div_mouseenter_0_listener() {\n          return ctx.onMouseEnter();\n        })(\"mouseleave\", function ToastComponent_Template_div_mouseleave_0_listener() {\n          return ctx.onMouseLeave();\n        });\n        i0.ɵɵtemplate(1, ToastComponent_div_1_Template, 2, 3, \"div\", 1)(2, ToastComponent_div_2_Template, 7, 5, \"div\", 2)(3, ToastComponent_ng_template_3_Template, 1, 1, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor)(5, ToastComponent_ng_snotify_button_5_Template, 1, 1, \"ng-snotify-button\", 4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r3 = i0.ɵɵreference(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(9, _c4, \"snotify-\" + ctx.toast.config.type, ctx.state.animation, ctx.toast.valid === undefined ? \"\" : ctx.toast.valid ? \"snotifyToast--valid\" : \"snotifyToast--invalid\"))(\"ngStyle\", i0.ɵɵpureFunction4(13, _c5, ctx.toast.config.animation.time + \"ms\", ctx.toast.config.animation.time + \"ms\", ctx.toast.config.animation.time + \"ms\", ctx.toast.config.animation.time + \"ms\"));\n        i0.ɵɵattribute(\"role\", ctx.toast.config.type === ctx.state.promptType ? \"dialog\" : \"alert\")(\"aria-labelledby\", \"snotify_\" + ctx.toast.id)(\"aria-modal\", ctx.toast.config.type === ctx.state.promptType);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.toast.config.showProgressBar);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.toast.config.html)(\"ngIfElse\", _r3);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.toast.config.buttons);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgIf, i2.NgStyle, ButtonsComponent, PromptComponent, TruncatePipe],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-snotify-toast',\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div\\n  [attr.role]=\\\"toast.config.type === state.promptType ? 'dialog' : 'alert'\\\"\\n  [attr.aria-labelledby]=\\\"'snotify_' + toast.id\\\"\\n  [attr.aria-modal]=\\\"toast.config.type === state.promptType\\\"\\n  [ngClass]=\\\"[\\n    'snotifyToast animated',\\n    'snotify-' + toast.config.type,\\n    state.animation,\\n    toast.valid === undefined ? '' : toast.valid ? 'snotifyToast--valid' : 'snotifyToast--invalid'\\n  ]\\\"\\n  [ngStyle]=\\\"{\\n    '-webkit-transition': toast.config.animation.time + 'ms',\\n    transition: toast.config.animation.time + 'ms',\\n    '-webkit-animation-duration': toast.config.animation.time + 'ms',\\n    'animation-duration': toast.config.animation.time + 'ms'\\n  }\\\"\\n  (animationend)=\\\"onExitTransitionEnd()\\\"\\n  (click)=\\\"onClick()\\\"\\n  (mouseenter)=\\\"onMouseEnter()\\\"\\n  (mouseleave)=\\\"onMouseLeave()\\\"\\n>\\n  <div class=\\\"snotifyToast__progressBar\\\" *ngIf=\\\"toast.config.showProgressBar\\\">\\n    <span class=\\\"snotifyToast__progressBar__percentage\\\" [ngStyle]=\\\"{ width: state.progress * 100 + '%' }\\\"></span>\\n  </div>\\n  <div class=\\\"snotifyToast__inner\\\" *ngIf=\\\"!toast.config.html; else toastHTML\\\">\\n    <div class=\\\"snotifyToast__title\\\" [attr.id]=\\\"'snotify_' + toast.id\\\" *ngIf=\\\"toast.title\\\">\\n      {{ toast.title | truncate: toast.config.titleMaxLength }}\\n    </div>\\n    <div class=\\\"snotifyToast__body\\\" *ngIf=\\\"toast.body\\\">{{ toast.body | truncate: toast.config.bodyMaxLength }}</div>\\n    <ng-snotify-prompt *ngIf=\\\"toast.config.type === state.promptType\\\" [toast]=\\\"toast\\\"> </ng-snotify-prompt>\\n    <div\\n      *ngIf=\\\"!toast.config.icon; else elseBlock\\\"\\n      [ngClass]=\\\"['snotify-icon', toast.config.iconClass || 'snotify-icon--' + toast.config.type]\\\"\\n    ></div>\\n    <ng-template #elseBlock>\\n      <img class=\\\"snotify-icon\\\" [src]=\\\"toast.config.icon\\\" />\\n    </ng-template>\\n  </div>\\n  <ng-template #toastHTML>\\n    <div class=\\\"snotifyToast__inner\\\" [innerHTML]=\\\"toast.config.html\\\"></div>\\n  </ng-template>\\n  <ng-snotify-button *ngIf=\\\"toast.config.buttons\\\" [toast]=\\\"toast\\\"></ng-snotify-button>\\n</div>\\n\"\n    }]\n  }], () => [{\n    type: SnotifyService\n  }], {\n    toast: [{\n      type: Input\n    }],\n    stateChanged: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * Extract object keys pipe\n */\nclass KeysPipe {\n  transform(value, args = null) {\n    if (!value) {\n      return value;\n    }\n    return Object.keys(value);\n  }\n  static ɵfac = function KeysPipe_Factory(t) {\n    return new (t || KeysPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"keys\",\n    type: KeysPipe,\n    pure: false\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeysPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'keys',\n      pure: false\n    }]\n  }], null, null);\n})();\nclass SnotifyComponent {\n  service;\n  /**\n   * Toasts array\n   */\n  notifications;\n  /**\n   * Toasts emitter\n   */\n  emitter;\n  /**\n   * Helper for slice pipe (maxOnScreen)\n   */\n  dockSizeA;\n  /**\n   * Helper for slice pipe (maxOnScreen)\n   */\n  dockSizeB;\n  /**\n   * Helper for slice pipe (maxAtPosition)\n   */\n  blockSizeA;\n  /**\n   * Helper for slice pipe (maxAtPosition)\n   */\n  blockSizeB;\n  /**\n   * Backdrop Opacity\n   */\n  backdrop = -1;\n  /**\n   * How many toasts with backdrop in current queue\n   */\n  withBackdrop;\n  constructor(service) {\n    this.service = service;\n  }\n  /**\n   * Init base options. Subscribe to options, lifecycle change\n   */\n  ngOnInit() {\n    this.emitter = this.service.emitter.subscribe(toasts => {\n      if (this.service.config.global.newOnTop) {\n        this.dockSizeA = -this.service.config.global.maxOnScreen;\n        this.dockSizeB = undefined;\n        this.blockSizeA = -this.service.config.global.maxAtPosition;\n        this.blockSizeB = undefined;\n        this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0);\n      } else {\n        this.dockSizeA = 0;\n        this.dockSizeB = this.service.config.global.maxOnScreen;\n        this.blockSizeA = 0;\n        this.blockSizeB = this.service.config.global.maxAtPosition;\n        this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0).reverse();\n      }\n      this.notifications = this.splitToasts(toasts.slice(this.dockSizeA, this.dockSizeB));\n      this.stateChanged('mounted');\n    });\n  }\n  // TODO: fix backdrop if more than one toast called in a row\n  /**\n   * Changes the backdrop opacity\n   * @param event SnotifyEventType\n   */\n  stateChanged(event) {\n    if (!this.withBackdrop.length) {\n      if (this.backdrop >= 0) {\n        this.backdrop = -1;\n      }\n      return;\n    }\n    switch (event) {\n      case 'mounted':\n        if (this.backdrop < 0) {\n          this.backdrop = 0;\n        }\n        break;\n      case 'beforeShow':\n        this.backdrop = this.withBackdrop[this.withBackdrop.length - 1].config.backdrop;\n        break;\n      case 'beforeHide':\n        if (this.withBackdrop.length === 1) {\n          this.backdrop = 0;\n        }\n        break;\n      case 'hidden':\n        if (this.withBackdrop.length === 1) {\n          this.backdrop = -1;\n        }\n        break;\n    }\n  }\n  /**\n   * Split toasts toasts into different objects\n   * @param toasts SnotifyToast[]\n   * @returns SnotifyNotifications\n   */\n  splitToasts(toasts) {\n    const result = {};\n    for (const property in SnotifyPosition) {\n      if (SnotifyPosition.hasOwnProperty(property)) {\n        result[SnotifyPosition[property]] = [];\n      }\n    }\n    toasts.forEach(toast => {\n      result[toast.config.position].push(toast);\n    });\n    return result;\n  }\n  /**\n   * Unsubscribe subscriptions\n   */\n  ngOnDestroy() {\n    this.emitter.unsubscribe();\n  }\n  static ɵfac = function SnotifyComponent_Factory(t) {\n    return new (t || SnotifyComponent)(i0.ɵɵdirectiveInject(SnotifyService));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SnotifyComponent,\n    selectors: [[\"ng-snotify\"]],\n    decls: 3,\n    vars: 4,\n    consts: [[\"class\", \"snotify-backdrop\", 3, \"opacity\", 4, \"ngIf\"], [3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"snotify-backdrop\"], [3, \"toast\", \"stateChanged\", 4, \"ngFor\", \"ngForOf\"], [3, \"toast\", \"stateChanged\"]],\n    template: function SnotifyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, SnotifyComponent_div_0_Template, 1, 2, \"div\", 0)(1, SnotifyComponent_div_1_Template, 3, 8, \"div\", 1);\n        i0.ɵɵpipe(2, \"keys\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.backdrop >= 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 2, ctx.notifications));\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, ToastComponent, i2.SlicePipe, KeysPipe],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SnotifyComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-snotify',\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div class=\\\"snotify-backdrop\\\" *ngIf=\\\"backdrop >= 0\\\" [style.opacity]=\\\"backdrop\\\"></div>\\n<div *ngFor=\\\"let position of notifications | keys\\\" class=\\\"snotify snotify-{{ position }}\\\">\\n  <ng-snotify-toast\\n    *ngFor=\\\"let notification of notifications[position] | slice: blockSizeA:blockSizeB\\\"\\n    [toast]=\\\"notification\\\"\\n    (stateChanged)=\\\"stateChanged($event)\\\"\\n  >\\n  </ng-snotify-toast>\\n</div>\\n\"\n    }]\n  }], () => [{\n    type: SnotifyService\n  }], null);\n})();\nclass SnotifyModule {\n  static forRoot() {\n    return {\n      ngModule: SnotifyModule,\n      providers: [SnotifyService]\n    };\n  }\n  static ɵfac = function SnotifyModule_Factory(t) {\n    return new (t || SnotifyModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SnotifyModule,\n    declarations: [SnotifyComponent, ToastComponent, TruncatePipe, ButtonsComponent, PromptComponent, KeysPipe],\n    imports: [CommonModule],\n    exports: [SnotifyComponent, TruncatePipe, KeysPipe]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SnotifyModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [SnotifyComponent, ToastComponent, TruncatePipe, ButtonsComponent, PromptComponent, KeysPipe],\n      exports: [SnotifyComponent, TruncatePipe, KeysPipe]\n    }]\n  }], null, null);\n})();\n\n/**\n * Snotify default configuration object\n */\nconst ToastDefaults = {\n  global: {\n    newOnTop: true,\n    maxOnScreen: 8,\n    maxAtPosition: 8,\n    filterDuplicates: false\n  },\n  toast: {\n    type: SnotifyStyle.simple,\n    showProgressBar: true,\n    timeout: 2000,\n    closeOnClick: true,\n    pauseOnHover: true,\n    bodyMaxLength: 150,\n    titleMaxLength: 16,\n    backdrop: -1,\n    icon: null,\n    iconClass: null,\n    html: null,\n    position: SnotifyPosition.rightBottom,\n    animation: {\n      enter: 'fadeIn',\n      exit: 'fadeOut',\n      time: 400\n    }\n  },\n  type: {\n    [SnotifyStyle.prompt]: {\n      timeout: 0,\n      closeOnClick: false,\n      buttons: [{\n        text: 'Ok',\n        action: null,\n        bold: true\n      }, {\n        text: 'Cancel',\n        action: null,\n        bold: false\n      }],\n      placeholder: 'Enter answer here...',\n      type: SnotifyStyle.prompt\n    },\n    [SnotifyStyle.confirm]: {\n      timeout: 0,\n      closeOnClick: false,\n      buttons: [{\n        text: 'Ok',\n        action: null,\n        bold: true\n      }, {\n        text: 'Cancel',\n        action: null,\n        bold: false\n      }],\n      type: SnotifyStyle.confirm\n    },\n    [SnotifyStyle.simple]: {\n      type: SnotifyStyle.simple\n    },\n    [SnotifyStyle.success]: {\n      type: SnotifyStyle.success\n    },\n    [SnotifyStyle.error]: {\n      type: SnotifyStyle.error\n    },\n    [SnotifyStyle.warning]: {\n      type: SnotifyStyle.warning\n    },\n    [SnotifyStyle.info]: {\n      type: SnotifyStyle.info\n    },\n    [SnotifyStyle.async]: {\n      pauseOnHover: false,\n      closeOnClick: false,\n      timeout: 0,\n      showProgressBar: false,\n      type: SnotifyStyle.async\n    }\n  }\n};\n\n/*\n * Public API Surface of ng-alt-snotify\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ButtonsComponent, KeysPipe, PromptComponent, SnotifyComponent, SnotifyModule, SnotifyPosition, SnotifyService, SnotifyStyle, SnotifyToast, ToastComponent, ToastDefaults, TruncatePipe };\n//# sourceMappingURL=ng-alt-snotify.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}