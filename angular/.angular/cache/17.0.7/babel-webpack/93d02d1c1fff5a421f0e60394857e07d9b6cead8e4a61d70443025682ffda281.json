{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Observable, throwError, timer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { NotifierService } from 'angular-notifier';\nlet RequestOptionsService = class RequestOptionsService {\n  constructor(router, notifierService) {\n    this.router = router;\n    this.notifier = notifierService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error.status === 401) {\n        console.log('Unauthorized response, logging out');\n        // Remove token and redirect to login\n        localStorage.removeItem('token');\n        // Delay the redirection to the login page by 2 seconds (adjust as needed)\n        location.reload();\n        return timer(2000).pipe(switchMap(() => {\n          // Reload the current page to fully log out and clear any remaining state\n          this.router.navigateByUrl('/login');\n          this.notifier.notify(\"info\", \"Token expired, logging user out.\");\n          // Return an empty observable to prevent the original request from reaching the server\n          return new Observable();\n        }));\n      }\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: Router\n  }, {\n    type: NotifierService\n  }];\n};\nRequestOptionsService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [Router, NotifierService])], RequestOptionsService);\nexport { RequestOptionsService };\nexport const RequestOptionsProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: RequestOptionsService,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}