{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Inject, Injectable, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, EventEmitter, Output, Pipe, NgModule } from '@angular/core';\nimport { Subject, from } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * Toast style.\r\n */\nvar SnotifyStyle;\n(function (SnotifyStyle) {\n  SnotifyStyle[\"simple\"] = \"simple\";\n  SnotifyStyle[\"success\"] = \"success\";\n  SnotifyStyle[\"error\"] = \"error\";\n  SnotifyStyle[\"warning\"] = \"warning\";\n  SnotifyStyle[\"info\"] = \"info\";\n  SnotifyStyle[\"async\"] = \"async\";\n  SnotifyStyle[\"confirm\"] = \"confirm\";\n  SnotifyStyle[\"prompt\"] = \"prompt\";\n})(SnotifyStyle || (SnotifyStyle = {}));\n\n/**\r\n * Transform arguments to Snotify object\r\n * @param target any\r\n * @param propertyKey SnotifyType\r\n * @param descriptor PropertyDescriptor\r\n * @returns Snotify\r\n */\nfunction TransformArgument(target, propertyKey, descriptor) {\n  if (propertyKey === SnotifyStyle.async) {\n    return {\n      value(...args) {\n        let result;\n        if (args.length === 2) {\n          result = {\n            title: null,\n            body: args[0],\n            config: null,\n            action: args[1]\n          };\n        } else if (args.length === 3) {\n          if (typeof args[1] === 'string') {\n            result = {\n              title: args[1],\n              body: args[0],\n              config: null,\n              action: args[2]\n            };\n          } else {\n            result = {\n              title: null,\n              body: args[0],\n              config: args[2],\n              action: args[1]\n            };\n          }\n        } else {\n          result = {\n            title: args[1],\n            body: args[0],\n            config: args[3],\n            action: args[2]\n          };\n        }\n        return descriptor.value.apply(this, [result]);\n      }\n    };\n  } else {\n    return {\n      value(...args) {\n        let result;\n        if (args.length === 1) {\n          result = {\n            title: null,\n            body: args[0],\n            config: null\n          };\n        } else if (args.length === 3) {\n          result = {\n            title: args[1],\n            body: args[0],\n            config: args[2]\n          };\n        } else {\n          result = {\n            title: null,\n            config: null,\n            body: args[0],\n            [typeof args[1] === 'string' ? 'title' : 'config']: args[1]\n          };\n        }\n        return descriptor.value.apply(this, [result]);\n      }\n    };\n  }\n}\n\n/**\r\n * Generates random id\r\n * @return number\r\n */\nfunction uuid() {\n  return Math.floor(Math.random() * (Date.now() - 1)) + 1;\n}\n/**\r\n * Simple is object check.\r\n * @param item Object<any>\r\n * @returns boolean\r\n */\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\r\n * Deep merge objects.\r\n * @param sources Array<Object<any>>\r\n * @returns Object<any>\r\n */\nfunction mergeDeep(...sources) {\n  const target = {};\n  if (!sources.length) {\n    return target;\n  }\n  while (sources.length > 0) {\n    const source = sources.shift();\n    if (isObject(source)) {\n      for (const key in source) {\n        if (isObject(source[key])) {\n          target[key] = mergeDeep(target[key], source[key]);\n        } else {\n          Object.assign(target, {\n            [key]: source[key]\n          });\n        }\n      }\n    }\n  }\n  return target;\n}\nfunction animate(start, duration, callback) {\n  let endTime;\n  requestAnimationFrame(timestamp => endTime = timestamp + duration);\n  const calculate = () => {\n    requestAnimationFrame(timestamp => {\n      const runtime = timestamp - endTime;\n      const progress = Math.min(runtime / duration, 1) + start;\n      if (runtime < duration) {\n        if (callback(+(100 * progress).toFixed(2), progress)) {\n          calculate();\n        }\n      }\n    });\n  };\n}\n\n/**\r\n * Defines toast style depending on method name\r\n * @param target any\r\n * @param propertyKey SnotifyType\r\n * @param descriptor PropertyDescriptor\r\n * @returns value: ((...args: any[]) => any)\r\n */\nfunction SetToastType(target, propertyKey, descriptor) {\n  return {\n    value(...args) {\n      args[0].config = Object.assign(Object.assign({}, args[0].config), {\n        type: propertyKey\n      });\n      return descriptor.value.apply(this, args);\n    }\n  };\n}\n\n// @TODO remove method in observable way\n/**\r\n * Toast main model\r\n */\nclass SnotifyToast {\n  constructor(id, title, body, config) {\n    this.id = id;\n    this.title = title;\n    this.body = body;\n    this.config = config;\n    /**\r\n     * Emits SnotifyEvent\r\n     */\n    this.eventEmitter = new Subject();\n    /**\r\n     * Holds all subscribers because we need to unsubscribe from all before toast get destroyed\r\n     */\n    this.eventsHolder = [];\n    if (this.config.type === SnotifyStyle.prompt) {\n      this.value = '';\n    }\n    this.on('hidden', () => {\n      this.eventsHolder.forEach(subscription => {\n        subscription.unsubscribe();\n      });\n    });\n  }\n  /**\r\n   * Subscribe to toast events\r\n   * @returns this\r\n   * @param event SnotifyEvent\r\n   * @param action (toast: this) => void\r\n   */\n  on(event, action) {\n    this.eventsHolder.push(this.eventEmitter.subscribe(e => {\n      if (e === event) {\n        action(this);\n      }\n    }));\n    return this;\n  }\n  /**\r\n   * Tests if a toast equals this toast.\r\n   * @returns boolean true then equals else false.\r\n   * @param toast SnotifyToast\r\n   */\n  equals(toast) {\n    return this.body === toast.body && this.title === toast.title && this.config.type === toast.config.type;\n  }\n}\n\n/**\r\n * SnotifyService - create, remove, config toasts\r\n */\nlet SnotifyService =\n// tslint:disable:unified-signatures\nclass SnotifyService {\n  constructor(config) {\n    this.config = config;\n    this.emitter = new Subject();\n    this.toastChanged = new Subject();\n    this.toastDeleted = new Subject();\n    this.notifications = [];\n  }\n  /**\r\n   * emit changes in notifications array\r\n   */\n  emit() {\n    this.emitter.next(this.notifications.slice());\n  }\n  /**\r\n   * returns SnotifyToast object\r\n   * @param id Number\r\n   * @return SnotifyToast|undefined\r\n   */\n  get(id) {\n    return this.notifications.find(toast => toast.id === id);\n  }\n  /**\r\n   * add SnotifyToast to notifications array\r\n   * @param toast SnotifyToast\r\n   */\n  add(toast) {\n    if (this.config.global.filterDuplicates && this.containsToast(toast)) {\n      return;\n    }\n    if (this.config.global.newOnTop) {\n      this.notifications.unshift(toast);\n    } else {\n      this.notifications.push(toast);\n    }\n    this.emit();\n  }\n  /**\r\n   * checks if the toast is in the collection.\r\n   * @param inToast SnotifyToast\r\n   * @returns boolean\r\n   */\n  containsToast(inToast) {\n    return this.notifications.some(toast => toast.equals(inToast));\n  }\n  /**\r\n   * If ID passed, emits toast animation remove, if ID & REMOVE passed, removes toast from notifications array\r\n   * @param id number\r\n   * @param remove boolean\r\n   */\n  remove(id, remove) {\n    if (!id) {\n      return this.clear();\n    } else if (remove) {\n      this.notifications = this.notifications.filter(toast => toast.id !== id);\n      return this.emit();\n    }\n    this.toastDeleted.next(id);\n  }\n  /**\r\n   * Clear notifications array\r\n   */\n  clear() {\n    this.notifications = [];\n    this.emit();\n  }\n  /**\r\n   * Creates toast and add it to array, returns toast id\r\n   * @param snotify Snotify\r\n   * @return number\r\n   */\n  create(snotify) {\n    const config = mergeDeep(this.config.toast, this.config.type[snotify.config.type], snotify.config);\n    const toast = new SnotifyToast(uuid(), snotify.title, snotify.body, config);\n    this.add(toast);\n    return toast;\n  }\n  setDefaults(defaults) {\n    return this.config = mergeDeep(this.config, defaults);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  simple(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  success(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  error(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  info(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  warning(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  confirm(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  prompt(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  async(args) {\n    let async;\n    if (args.action instanceof Promise) {\n      async = from(args.action);\n    } else {\n      async = args.action;\n    }\n    const toast = this.create(args);\n    toast.on('mounted', () => {\n      const subscription = async.subscribe(next => {\n        this.mergeToast(toast, next);\n      }, error => {\n        this.mergeToast(toast, error, SnotifyStyle.error);\n        subscription.unsubscribe();\n      }, () => {\n        this.mergeToast(toast, {}, SnotifyStyle.success);\n        subscription.unsubscribe();\n      });\n    });\n    return toast;\n  }\n  mergeToast(toast, next, type) {\n    if (next.body) {\n      toast.body = next.body;\n    }\n    if (next.title) {\n      toast.title = next.title;\n    }\n    if (type) {\n      toast.config = mergeDeep(toast.config, this.config.global, this.config.toast[type], {\n        type\n      }, next.config);\n    } else {\n      toast.config = mergeDeep(toast.config, next.config);\n    }\n    if (next.html) {\n      toast.config.html = next.html;\n    }\n    this.emit();\n    this.toastChanged.next(toast);\n  }\n  /**\r\n   * Creates empty toast with html string inside\r\n   * @param html string | SafeHtml\r\n   * @param config SnotifyToastConfig\r\n   * @returns number\r\n   */\n  html(html, config) {\n    return this.create({\n      title: null,\n      body: null,\n      config: Object.assign(Object.assign({}, config), {\n        html\n      })\n    });\n  }\n};\nSnotifyService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: ['SnotifyToastConfig']\n  }]\n}];\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"simple\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"success\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"error\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"info\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"warning\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"confirm\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"prompt\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"async\", null);\nSnotifyService = __decorate([Injectable()\n// tslint:disable:unified-signatures\n, __param(0, Inject('SnotifyToastConfig'))], SnotifyService);\nlet ButtonsComponent =\n/**\r\n * Buttons component\r\n */\nclass ButtonsComponent {\n  constructor(service) {\n    this.service = service;\n  }\n  /**\r\n   * remove toast\r\n   */\n  remove() {\n    this.service.remove(this.toast.id);\n  }\n};\nButtonsComponent.ctorParameters = () => [{\n  type: SnotifyService\n}];\n__decorate([Input()], ButtonsComponent.prototype, \"toast\", void 0);\nButtonsComponent = __decorate([Component({\n  selector: 'ng-snotify-button',\n  template: \"<div class=\\\"snotifyToast__buttons\\\">\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    *ngFor=\\\"let button of toast.config.buttons\\\"\\r\\n    [ngClass]=\\\"{ 'snotifyToast__buttons--bold': button.bold }\\\"\\r\\n    (click)=\\\"button.action ? button.action(toast) : remove()\\\"\\r\\n  >\\r\\n    {{ button.text }}\\r\\n  </button>\\r\\n</div>\\r\\n\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\n/**\r\n * Buttons component\r\n */], ButtonsComponent);\nlet PromptComponent =\n/**\r\n * Prompt component. Part of PROMPT type\r\n */\nclass PromptComponent {\n  constructor() {\n    /**\r\n     * Is PROMPT focused\r\n     */\n    this.isPromptFocused = false;\n  }\n};\n__decorate([Input()], PromptComponent.prototype, \"toast\", void 0);\nPromptComponent = __decorate([Component({\n  selector: 'ng-snotify-prompt',\n  template: \"<span class=\\\"snotifyToast__input\\\" [ngClass]=\\\"{ 'snotifyToast__input--filled': isPromptFocused }\\\">\\r\\n  <input\\r\\n    (input)=\\\"toast.value = $event.target.value; toast.eventEmitter.next('input')\\\"\\r\\n    autofocus\\r\\n    class=\\\"snotifyToast__input__field\\\"\\r\\n    type=\\\"text\\\"\\r\\n    [id]=\\\"toast.id\\\"\\r\\n    (focus)=\\\"isPromptFocused = true\\\"\\r\\n    (blur)=\\\"isPromptFocused = !!toast.value.length\\\"\\r\\n  />\\r\\n  <label class=\\\"snotifyToast__input__label\\\" [for]=\\\"toast.id\\\">\\r\\n    <span class=\\\"snotifyToast__input__labelContent\\\">{{ toast.config.placeholder | truncate }}</span>\\r\\n  </label>\\r\\n</span>\\r\\n\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\n/**\r\n * Prompt component. Part of PROMPT type\r\n */], PromptComponent);\n\n/**\r\n * Toast position\r\n */\nvar SnotifyPosition;\n(function (SnotifyPosition) {\n  SnotifyPosition[\"leftTop\"] = \"leftTop\";\n  SnotifyPosition[\"leftCenter\"] = \"leftCenter\";\n  SnotifyPosition[\"leftBottom\"] = \"leftBottom\";\n  SnotifyPosition[\"rightTop\"] = \"rightTop\";\n  SnotifyPosition[\"rightCenter\"] = \"rightCenter\";\n  SnotifyPosition[\"rightBottom\"] = \"rightBottom\";\n  SnotifyPosition[\"centerTop\"] = \"centerTop\";\n  SnotifyPosition[\"centerCenter\"] = \"centerCenter\";\n  SnotifyPosition[\"centerBottom\"] = \"centerBottom\";\n})(SnotifyPosition || (SnotifyPosition = {}));\nlet SnotifyComponent = class SnotifyComponent {\n  constructor(service) {\n    this.service = service;\n    /**\r\n     * Backdrop Opacity\r\n     */\n    this.backdrop = -1;\n  }\n  /**\r\n   * Init base options. Subscribe to options, lifecycle change\r\n   */\n  ngOnInit() {\n    this.emitter = this.service.emitter.subscribe(toasts => {\n      if (this.service.config.global.newOnTop) {\n        this.dockSizeA = -this.service.config.global.maxOnScreen;\n        this.dockSizeB = undefined;\n        this.blockSizeA = -this.service.config.global.maxAtPosition;\n        this.blockSizeB = undefined;\n        this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0);\n      } else {\n        this.dockSizeA = 0;\n        this.dockSizeB = this.service.config.global.maxOnScreen;\n        this.blockSizeA = 0;\n        this.blockSizeB = this.service.config.global.maxAtPosition;\n        this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0).reverse();\n      }\n      this.notifications = this.splitToasts(toasts.slice(this.dockSizeA, this.dockSizeB));\n      this.stateChanged('mounted');\n    });\n  }\n  // TODO: fix backdrop if more than one toast called in a row\n  /**\r\n   * Changes the backdrop opacity\r\n   * @param event SnotifyEvent\r\n   */\n  stateChanged(event) {\n    if (!this.withBackdrop.length) {\n      if (this.backdrop >= 0) {\n        this.backdrop = -1;\n      }\n      return;\n    }\n    switch (event) {\n      case 'mounted':\n        if (this.backdrop < 0) {\n          this.backdrop = 0;\n        }\n        break;\n      case 'beforeShow':\n        this.backdrop = this.withBackdrop[this.withBackdrop.length - 1].config.backdrop;\n        break;\n      case 'beforeHide':\n        if (this.withBackdrop.length === 1) {\n          this.backdrop = 0;\n        }\n        break;\n      case 'hidden':\n        if (this.withBackdrop.length === 1) {\n          this.backdrop = -1;\n        }\n        break;\n    }\n  }\n  /**\r\n   * Split toasts toasts into different objects\r\n   * @param toasts SnotifyToast[]\r\n   * @returns SnotifyNotifications\r\n   */\n  splitToasts(toasts) {\n    const result = {};\n    for (const property in SnotifyPosition) {\n      if (SnotifyPosition.hasOwnProperty(property)) {\n        result[SnotifyPosition[property]] = [];\n      }\n    }\n    toasts.forEach(toast => {\n      result[toast.config.position].push(toast);\n    });\n    return result;\n  }\n  /**\r\n   * Unsubscribe subscriptions\r\n   */\n  ngOnDestroy() {\n    this.emitter.unsubscribe();\n  }\n};\nSnotifyComponent.ctorParameters = () => [{\n  type: SnotifyService\n}];\nSnotifyComponent = __decorate([Component({\n  selector: 'ng-snotify',\n  template: \"<div class=\\\"snotify-backdrop\\\" *ngIf=\\\"backdrop >= 0\\\" [style.opacity]=\\\"backdrop\\\"></div>\\r\\n<div *ngFor=\\\"let position of notifications | keys\\\" class=\\\"snotify snotify-{{ position }}\\\">\\r\\n  <ng-snotify-toast\\r\\n    *ngFor=\\\"let notification of notifications[position] | slice: blockSizeA:blockSizeB\\\"\\r\\n    [toast]=\\\"notification\\\"\\r\\n    (stateChanged)=\\\"stateChanged($event)\\\"\\r\\n  >\\r\\n  </ng-snotify-toast>\\r\\n</div>\\r\\n\",\n  encapsulation: ViewEncapsulation.None\n})], SnotifyComponent);\nlet ToastComponent = class ToastComponent {\n  constructor(service) {\n    this.service = service;\n    this.stateChanged = new EventEmitter();\n    /**\r\n     * Toast state\r\n     */\n    this.state = {\n      paused: false,\n      progress: 0,\n      animation: '',\n      isDestroying: false,\n      promptType: SnotifyStyle.prompt\n    };\n  }\n  // Lifecycles\n  /**\r\n   * Init base options. Subscribe to toast changed, toast deleted\r\n   */\n  ngOnInit() {\n    this.toastChangedSubscription = this.service.toastChanged.subscribe(toast => {\n      if (this.toast.id === toast.id) {\n        this.initToast();\n      }\n    });\n    this.toastDeletedSubscription = this.service.toastDeleted.subscribe(id => {\n      if (this.toast.id === id) {\n        this.onRemove();\n      }\n    });\n    if (!this.toast.config.timeout) {\n      this.toast.config.showProgressBar = false;\n    }\n    this.toast.eventEmitter.next('mounted');\n    this.state.animation = 'snotifyToast--in';\n  }\n  ngAfterContentInit() {\n    setTimeout(() => {\n      this.stateChanged.emit('beforeShow');\n      this.toast.eventEmitter.next('beforeShow');\n      this.state.animation = this.toast.config.animation.enter;\n    }, this.service.config.toast.animation.time / 5); // time to show toast push animation (snotifyToast--in)\n  }\n  /**\r\n   * Unsubscribe subscriptions\r\n   */\n  ngOnDestroy() {\n    cancelAnimationFrame(this.animationFrame);\n    this.toast.eventEmitter.next('destroyed');\n    this.toastChangedSubscription.unsubscribe();\n    this.toastDeletedSubscription.unsubscribe();\n  }\n  /*\r\n  Event hooks\r\n   */\n  /**\r\n   * Trigger OnClick lifecycle\r\n   */\n  onClick() {\n    this.toast.eventEmitter.next('click');\n    if (this.toast.config.closeOnClick) {\n      this.service.remove(this.toast.id);\n    }\n  }\n  /**\r\n   * Trigger beforeDestroy lifecycle. Removes toast\r\n   */\n  onRemove() {\n    this.state.isDestroying = true;\n    this.toast.eventEmitter.next('beforeHide');\n    this.stateChanged.emit('beforeHide');\n    this.state.animation = this.toast.config.animation.exit;\n    setTimeout(() => {\n      this.stateChanged.emit('hidden');\n      this.state.animation = 'snotifyToast--out';\n      this.toast.eventEmitter.next('hidden');\n      setTimeout(() => this.service.remove(this.toast.id, true), this.toast.config.animation.time / 2);\n    }, this.toast.config.animation.time / 2);\n  }\n  /**\r\n   * Trigger onHoverEnter lifecycle\r\n   */\n  onMouseEnter() {\n    this.toast.eventEmitter.next('mouseenter');\n    if (this.toast.config.pauseOnHover) {\n      this.state.paused = true;\n    }\n  }\n  /**\r\n   * Trigger onHoverLeave lifecycle\r\n   */\n  onMouseLeave() {\n    if (this.toast.config.pauseOnHover && this.toast.config.timeout) {\n      this.state.paused = false;\n      this.startTimeout(this.toast.config.timeout * this.state.progress);\n    }\n    this.toast.eventEmitter.next('mouseleave');\n  }\n  /**\r\n   * Remove toast completely after animation\r\n   */\n  onExitTransitionEnd() {\n    if (this.state.isDestroying) {\n      return;\n    }\n    this.initToast();\n    this.toast.eventEmitter.next('shown');\n  }\n  /*\r\n   Common\r\n   */\n  /**\r\n   * Initialize base toast config\r\n   *\r\n   */\n  initToast() {\n    if (this.toast.config.timeout > 0) {\n      this.startTimeout(0);\n    }\n  }\n  /**\r\n   * Start progress bar\r\n   * @param startTime number\r\n   */\n  startTimeout(startTime = 0) {\n    const start = performance.now();\n    const calculate = () => {\n      this.animationFrame = requestAnimationFrame(timestamp => {\n        const runtime = timestamp + startTime - start;\n        const progress = Math.min(runtime / this.toast.config.timeout, 1);\n        if (this.state.paused) {\n          cancelAnimationFrame(this.animationFrame);\n        } else if (runtime < this.toast.config.timeout) {\n          this.state.progress = progress;\n          calculate();\n        } else {\n          this.state.progress = 1;\n          cancelAnimationFrame(this.animationFrame);\n          this.service.remove(this.toast.id);\n        }\n      });\n    };\n    calculate();\n  }\n};\nToastComponent.ctorParameters = () => [{\n  type: SnotifyService\n}];\n__decorate([Input()], ToastComponent.prototype, \"toast\", void 0);\n__decorate([Output()], ToastComponent.prototype, \"stateChanged\", void 0);\nToastComponent = __decorate([Component({\n  selector: 'ng-snotify-toast',\n  template: \"<div\\r\\n  [attr.role]=\\\"toast.config.type === state.promptType ? 'dialog' : 'alert'\\\"\\r\\n  [attr.aria-labelledby]=\\\"'snotify_' + toast.id\\\"\\r\\n  [attr.aria-modal]=\\\"toast.config.type === state.promptType\\\"\\r\\n  [ngClass]=\\\"[\\r\\n    'snotifyToast animated',\\r\\n    'snotify-' + toast.config.type,\\r\\n    state.animation,\\r\\n    toast.valid === undefined ? '' : toast.valid ? 'snotifyToast--valid' : 'snotifyToast--invalid'\\r\\n  ]\\\"\\r\\n  [ngStyle]=\\\"{\\r\\n    '-webkit-transition': toast.config.animation.time + 'ms',\\r\\n    transition: toast.config.animation.time + 'ms',\\r\\n    '-webkit-animation-duration': toast.config.animation.time + 'ms',\\r\\n    'animation-duration': toast.config.animation.time + 'ms'\\r\\n  }\\\"\\r\\n  (animationend)=\\\"onExitTransitionEnd()\\\"\\r\\n  (click)=\\\"onClick()\\\"\\r\\n  (mouseenter)=\\\"onMouseEnter()\\\"\\r\\n  (mouseleave)=\\\"onMouseLeave()\\\"\\r\\n>\\r\\n  <div class=\\\"snotifyToast__progressBar\\\" *ngIf=\\\"toast.config.showProgressBar\\\">\\r\\n    <span class=\\\"snotifyToast__progressBar__percentage\\\" [ngStyle]=\\\"{ width: state.progress * 100 + '%' }\\\"></span>\\r\\n  </div>\\r\\n  <div class=\\\"snotifyToast__inner\\\" *ngIf=\\\"!toast.config.html; else toastHTML\\\">\\r\\n    <div class=\\\"snotifyToast__title\\\" [attr.id]=\\\"'snotify_' + toast.id\\\" *ngIf=\\\"toast.title\\\">\\r\\n      {{ toast.title | truncate: toast.config.titleMaxLength }}\\r\\n    </div>\\r\\n    <div class=\\\"snotifyToast__body\\\" *ngIf=\\\"toast.body\\\">{{ toast.body | truncate: toast.config.bodyMaxLength }}</div>\\r\\n    <ng-snotify-prompt *ngIf=\\\"toast.config.type === state.promptType\\\" [toast]=\\\"toast\\\"> </ng-snotify-prompt>\\r\\n    <div\\r\\n      *ngIf=\\\"!toast.config.icon; else elseBlock\\\"\\r\\n      [ngClass]=\\\"['snotify-icon', toast.config.iconClass || 'snotify-icon--' + toast.config.type]\\\"\\r\\n    ></div>\\r\\n    <ng-template #elseBlock>\\r\\n      <img class=\\\"snotify-icon\\\" [src]=\\\"toast.config.icon\\\" />\\r\\n    </ng-template>\\r\\n  </div>\\r\\n  <ng-template #toastHTML>\\r\\n    <div class=\\\"snotifyToast__inner\\\" [innerHTML]=\\\"toast.config.html\\\"></div>\\r\\n  </ng-template>\\r\\n  <ng-snotify-button *ngIf=\\\"toast.config.buttons\\\" [toast]=\\\"toast\\\"></ng-snotify-button>\\r\\n</div>\\r\\n\",\n  encapsulation: ViewEncapsulation.None\n})], ToastComponent);\nlet KeysPipe =\n/**\r\n * Extract object keys pipe\r\n */\nclass KeysPipe {\n  transform(value, args = null) {\n    if (!value) {\n      return value;\n    }\n    return Object.keys(value);\n  }\n};\nKeysPipe = __decorate([Pipe({\n  name: 'keys',\n  pure: false\n})\n/**\r\n * Extract object keys pipe\r\n */], KeysPipe);\nlet TruncatePipe =\n/**\r\n * Truncate toast text pipe\r\n */\nclass TruncatePipe {\n  transform(value, ...args) {\n    let limit = 40;\n    let trail = '...';\n    if (args.length > 0) {\n      limit = args.length > 0 ? parseInt(args[0], 10) : limit;\n      trail = args.length > 1 ? args[1] : trail;\n    }\n    return value.length > limit ? value.substring(0, limit) + trail : value;\n  }\n};\nTruncatePipe = __decorate([Pipe({\n  name: 'truncate'\n})\n/**\r\n * Truncate toast text pipe\r\n */], TruncatePipe);\nvar SnotifyModule_1;\nlet SnotifyModule = SnotifyModule_1 = class SnotifyModule {\n  static forRoot() {\n    return {\n      ngModule: SnotifyModule_1,\n      providers: [SnotifyService]\n    };\n  }\n};\nSnotifyModule = SnotifyModule_1 = __decorate([NgModule({\n  imports: [CommonModule],\n  declarations: [SnotifyComponent, ToastComponent, TruncatePipe, ButtonsComponent, PromptComponent, KeysPipe],\n  exports: [SnotifyComponent, TruncatePipe, KeysPipe]\n})], SnotifyModule);\n\n/**\r\n * Snotify default configuration object\r\n */\nconst ToastDefaults = {\n  global: {\n    newOnTop: true,\n    maxOnScreen: 8,\n    maxAtPosition: 8,\n    filterDuplicates: false\n  },\n  toast: {\n    type: SnotifyStyle.simple,\n    showProgressBar: true,\n    timeout: 2000,\n    closeOnClick: true,\n    pauseOnHover: true,\n    bodyMaxLength: 150,\n    titleMaxLength: 16,\n    backdrop: -1,\n    icon: null,\n    iconClass: null,\n    html: null,\n    position: SnotifyPosition.rightBottom,\n    animation: {\n      enter: 'fadeIn',\n      exit: 'fadeOut',\n      time: 400\n    }\n  },\n  type: {\n    [SnotifyStyle.prompt]: {\n      timeout: 0,\n      closeOnClick: false,\n      buttons: [{\n        text: 'Ok',\n        action: null,\n        bold: true\n      }, {\n        text: 'Cancel',\n        action: null,\n        bold: false\n      }],\n      placeholder: 'Enter answer here...',\n      type: SnotifyStyle.prompt\n    },\n    [SnotifyStyle.confirm]: {\n      timeout: 0,\n      closeOnClick: false,\n      buttons: [{\n        text: 'Ok',\n        action: null,\n        bold: true\n      }, {\n        text: 'Cancel',\n        action: null,\n        bold: false\n      }],\n      type: SnotifyStyle.confirm\n    },\n    [SnotifyStyle.simple]: {\n      type: SnotifyStyle.simple\n    },\n    [SnotifyStyle.success]: {\n      type: SnotifyStyle.success\n    },\n    [SnotifyStyle.error]: {\n      type: SnotifyStyle.error\n    },\n    [SnotifyStyle.warning]: {\n      type: SnotifyStyle.warning\n    },\n    [SnotifyStyle.info]: {\n      type: SnotifyStyle.info\n    },\n    [SnotifyStyle.async]: {\n      pauseOnHover: false,\n      closeOnClick: false,\n      timeout: 0,\n      showProgressBar: false,\n      type: SnotifyStyle.async\n    }\n  }\n};\n\n/*\r\n * Public API Surface of ng-snotify\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ButtonsComponent, KeysPipe, PromptComponent, SnotifyComponent, SnotifyModule, SnotifyPosition, SnotifyService, SnotifyStyle, SnotifyToast, ToastComponent, ToastDefaults, TruncatePipe, SnotifyComponent as ɵa, SnotifyService as ɵb, TransformArgument as ɵd, SetToastType as ɵe, ToastComponent as ɵf, TruncatePipe as ɵg, ButtonsComponent as ɵh, PromptComponent as ɵi, KeysPipe as ɵj };\n//# sourceMappingURL=ng-snotify.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}